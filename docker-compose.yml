volumes:
  database:
    driver: local
  redis:
    driver: local

services:
  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_AUTHENTIK_PASSWORD}
      POSTGRES_USER: ${PG_AUTHENTIK_USERNAME}
      POSTGRES_DB: ${PG_AUTHENTIK_DATABASE}

  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data

  backcat_server:
    build:
      context: .
      dockerfile: dockerfile
    container_name: blackcat-server
    restart: unless-stopped
    ports:
      - 127.0.0.1:10804:8080
    volumes:
      - ./config.toml:/app/config.toml
    command: ["uv", "-q", "run", "python3"]

  authentik_server:
    image: ghcr.io/goauthentik/server:2025.2.2
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_AUTHENTIK_USERNAME}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_AUTHENTIK_DATABASE}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_AUTHENTIK_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    volumes:
      - ./volumes/authentik/media:/media
      - ./volumes/authentik/custom-templates:/templates
    ports:
      - 127.0.0.1:10805:9000
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
  worker:
    image: ghcr.io/goauthentik/server:2025.2.2
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_AUTHENTIK_USERNAME}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_AUTHENTIK_DATABASE}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_AUTHENTIK_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_DISABLE_STARTUP_ANALYTICS: false
      AUTHENTIK_DISABLE_UPDATE_CHECK: true
      AUTHENTIK_ERROR_REPORTING__ENABLED: falsae
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/authentik/media:/media
      - ./volumes/authentik/certs:/certs
      - ./volumes/authentik/custom-templates:/templates
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
